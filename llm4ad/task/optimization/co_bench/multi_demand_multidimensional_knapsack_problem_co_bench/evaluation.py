# References:
#   - Sun, W., Feng, S., Li, S., & Yang, Y. Co-bench: Benchmarking language
#       model agents in algorithm search for combinatorial optimization.
#       arXiv preprint arXiv:2504.04310 (2025).
#
# ------------------------------- Copyright --------------------------------
# Copyright (c) 2025 Optima Group.
#
# Permission is granted to use the LLM4AD platform for research purposes.
# All publications, software, or other works that utilize this platform
# or any part of its codebase must acknowledge the use of "LLM4AD" and
# cite the following reference:
#
# Fei Liu, Rui Zhang, Zhuoliang Xie, Rui Sun, Kai Li, Xi Lin, Zhenkun Wang,
# Zhichao Lu, and Qingfu Zhang, "LLM4AD: A Platform for Algorithm Design
# with Large Language Model," arXiv preprint arXiv:2412.17287 (2024).
#
# For inquiries regarding commercial use or licensing, please contact
# http://www.llm4ad.com/contact.html
# --------------------------------------------------------------------------

from __future__ import annotations

from typing import Any
import numpy as np
from llm4ad.base import Evaluation
from llm4ad.task.optimization.co_bench.utils import load_subdir_as_text
from llm4ad.task.optimization.co_bench.multi_demand_multidimensional_knapsack_problem_co_bench.template import template_program, task_description

__all__ = ['MDMKPEvaluationCB']


class MDMKPEvaluationCB(Evaluation):

    def __init__(self,
                 timeout_seconds=50,
                 **kwargs):

        """
            Args:
                None
            Raises:
                AttributeError: If the data key does not exist.
                FileNotFoundError: If the specified data file is not found.
        """

        super().__init__(
            template_program=template_program,
            task_description=task_description,
            use_numba_accelerate=False,
            timeout_seconds=timeout_seconds
        )

        # Load datasets from Hugging Face
        dataset = load_subdir_as_text("CO-Bench/CO-Bench", "Multi-Demand Multidimensional Knapsack problem")
        self._datasets = {}
        for filename in dataset:
            # Join all text rows into a single string
            text_content = '\n'.join([row['text'] for row in dataset[filename]])
            self._datasets[filename] = text_content

    def evaluate_program(self, program_str: str, callable_func: callable, **kwargs) -> Any | None:
        return self.evaluate(callable_func)

    def evaluate(self, eva: callable) -> float | None:
        ins_cases = []
        for case_id, ins in enumerate(self._datasets.values()):
            ins_cases.append(self.load_data(ins))

        fitness_list = []
        try:
            for i in ins_cases:
                for j in i:
                    result = eva(j['n'], j['m'], j['q'], j['A_leq'], j['b_leq'], j['A_geq'], j['b_geq'], j['cost_vector'], j['cost_type'])
                    fitness = self.eval_func(n=j['n'], m=j['m'], q=j['q'], A_leq=j['A_leq'], b_leq=j['b_leq'], A_geq=j['A_geq'], b_geq=j['b_geq'], cost_vector=j['cost_vector'], cost_type=j['cost_type'], x=result['x'])
                    fitness_list.append(fitness)

            return np.mean(fitness_list)

        except ValueError as e:
            print(e)
            return None

    def load_data(self, input_string):
        """
        Load MDMKP test instances from a given file and split each base instance into
        6 separate optimization problems. Each split instance is a dictionary with the keys:
            - 'n': number of decision variables.
            - 'm': number of <= constraints.
            - 'q': number of active >= constraints for this variant (1, m//2, or m).
            - 'A_leq': list of lists representing the <= constraints coefficients.
            - 'b_leq': list representing the right-hand side for the <= constraints.
            - 'A_geq': list of lists representing the active >= constraints coefficients (first q rows).
            - 'b_geq': list representing the active right-hand side values (first q values).
            - 'cost_vector': objective function coefficients for this variant.
            - 'cost_type': either "positive" or "mixed".
        The file format is assumed to be:
          - The first line contains an integer K: the number of base test instances.
          - For each instance:
              * A line with two integers: n (number of variables) and m (number of <= constraints).
              * m lines with n integers each: coefficients for the <= constraints.
              * One line with m integers: right-hand side for the <= constraints.
              * m lines with n integers each: coefficients for the >= constraints.
              * One line with m integers: right-hand side for the >= constraints.
              * 6 lines with n integers each: cost vectors.
                - The first 3 lines correspond to the positive cost case (for q = 1, m//2, m).
                - The next 3 lines correspond to the mixed cost case (for q = 1, m//2, m).
        Returns:
             A list of dictionaries, each representing one optimization problem variant.
        """
        instances = []

        lines = [line.strip() for line in input_string.split('\n') if line.strip() != '']

        idx = 0
        try:
            K = int(lines[idx])
        except Exception as e:
            raise ValueError("The first line must be an integer indicating the number of test instances.") from e
        idx += 1

        for k in range(K):
            # Read n and m for the base instance
            try:
                n, m = map(int, lines[idx].split())
            except Exception as e:
                raise ValueError(f"Error reading n and m for test instance {k + 1} at line {idx + 1}.") from e
            idx += 1

            # Read the <= constraints matrix (A_leq): m lines each with n coefficients
            A_leq = []
            for i in range(m):
                row = list(map(int, lines[idx].split()))
                if len(row) != n:
                    raise ValueError(
                        f"Test instance {k + 1}: Expected {n} coefficients for <= constraint {i + 1}, got {len(row)}.")
                A_leq.append(row)
                idx += 1

            # Read the right-hand side for <= constraints (b_leq): one line with m integers
            b_leq = list(map(int, lines[idx].split()))
            if len(b_leq) != m:
                raise ValueError(
                    f"Test instance {k + 1}: Expected {m} RHS values for <= constraints, got {len(b_leq)}.")
            idx += 1

            # Read the >= constraints matrix (A_geq): m lines each with n coefficients
            A_geq = []
            for i in range(m):
                row = list(map(int, lines[idx].split()))
                if len(row) != n:
                    raise ValueError(
                        f"Test instance {k + 1}: Expected {n} coefficients for >= constraint {i + 1}, got {len(row)}.")
                A_geq.append(row)
                idx += 1

            # Read the right-hand side for >= constraints (b_geq): one line with m integers
            b_geq = list(map(int, lines[idx].split()))
            if len(b_geq) != m:
                raise ValueError(
                    f"Test instance {k + 1}: Expected {m} RHS values for >= constraints, got {len(b_geq)}.")
            idx += 1

            # Read 6 cost vectors (each with n integers)
            cost_vectors = []
            for i in range(6):
                vector = list(map(int, lines[idx].split()))
                if len(vector) != n:
                    raise ValueError(
                        f"Test instance {k + 1}: Expected {n} values for cost vector {i + 1}, got {len(vector)}.")
                cost_vectors.append(vector)
                idx += 1

            # Define the q values for the three cases
            q_values = [1, m // 2, m]

            # Create 6 separate optimization problem variants.
            # For the first three cost vectors: positive cost case.
            # For the last three cost vectors: mixed cost case.
            for i in range(6):
                if i < 3:
                    cost_type = "positive"
                    q = q_values[i]
                    cost_vector = cost_vectors[i]
                else:
                    cost_type = "mixed"
                    q = q_values[i - 3]
                    cost_vector = cost_vectors[i]

                # For the >= constraints, take only the first q rows and corresponding RHS values.
                instance_variant = {
                    'n': n,
                    'm': m,
                    'q': q,
                    'A_leq': A_leq,
                    'b_leq': b_leq,
                    'A_geq': A_geq[:q],
                    'b_geq': b_geq[:q],
                    'cost_vector': cost_vector,
                    'cost_type': cost_type
                }
                instances.append(instance_variant)

        return instances

    def eval_func(self, **kwargs):
        """
        Evaluate a solution for a given MDMKP instance.
        This function expects keyword arguments that include both the instance data and the solution.
        It is designed to be used as:
            eval_func(**case, **output)
        where the instance 'case' contains the following keys:
            - n: int
                 Number of decision variables.
            - m: int
                 Number of <= constraints.
            - q: int
                 Number of active >= constraints (subset of the full set).
            - A_leq: list of lists of int (dimensions: m x n)
                 Coefficient matrix for <= constraints.
            - b_leq: list of int (length m)
                 Right-hand side for <= constraints.
            - A_geq: list of lists of int (dimensions: q x n)
                 Coefficient matrix for >= constraints.
            - b_geq: list of int (length q)
                 Right-hand side for >= constraints.
            - cost_vector: list of int (length n)
                 Objective function coefficients.
            - cost_type: str
                 A string indicating the cost type ("positive" or "mixed").
        And the solver output (the solution) is expected to include at least:
            - x: list of int
                 Binary decision vector (0 or 1) of length n.
        The evaluation process is as follows:
          1. Check that the decision vector is of the proper length and binary.
          2. Verify that each <= constraint is satisfied:
                 For each i in 0,...,m-1, sum_{j=0}^{n-1} A_leq[i][j]*x[j] <= b_leq[i]
          3. Verify that each >= constraint is satisfied:
                 For each i in 0,...,q-1, sum_{j=0}^{n-1} A_geq[i][j]*x[j] >= b_geq[i]
          4. If all constraints are satisfied, compute the objective value as:
                 score = sum_{j=0}^{n-1} cost_vector[j] * x[j]
          5. Return the computed score.
        If any constraint is violated or the input format is incorrect, the function raises a ValueError.
        Returns:
            score: int or float, the objective value computed from the solution.
        """
        # Extract instance data
        n = kwargs.get('n')
        m = kwargs.get('m')
        q = kwargs.get('q')
        A_leq = kwargs.get('A_leq')
        b_leq = kwargs.get('b_leq')
        A_geq = kwargs.get('A_geq')
        b_geq = kwargs.get('b_geq')
        cost_vector = kwargs.get('cost_vector')

        # Extract solution data
        x = kwargs.get('x')

        # Validate required keys
        if None in (n, m, q, A_leq, b_leq, A_geq, b_geq, cost_vector):
            raise ValueError("Missing one or more required instance keys for evaluation.")
        if x is None:
            raise ValueError("Solution output must include a decision vector 'x'.")

        # Validate decision vector: must be a list of length n and binary (0 or 1)
        if not isinstance(x, list) or len(x) != n:
            raise ValueError(f"Decision vector 'x' must be a list of length {n}.")
        if any(val not in (0, 1) for val in x):
            raise ValueError("Decision vector 'x' must be binary (0 or 1).")

        # Validate <= constraints: for each constraint, check feasibility.
        for i in range(m):
            lhs = sum(A_leq[i][j] * x[j] for j in range(n))
            if lhs > b_leq[i]:
                raise ValueError(f"<= Constraint {i + 1} violated: computed sum {lhs} exceeds RHS {b_leq[i]}.")

        # Validate >= constraints: for each constraint, check feasibility.
        for i in range(q):
            lhs = sum(A_geq[i][j] * x[j] for j in range(n))
            if lhs < b_geq[i]:
                raise ValueError(f">= Constraint {i + 1} violated: computed sum {lhs} is less than RHS {b_geq[i]}.")

        # Compute the objective value as the sum of cost_vector * x.
        score = sum(cost_vector[j] * x[j] for j in range(n))

        return score

    def norm_score(self, results):
        optimal_scores = {
            'mdmkp_ct1.txt': [31376.06099098094, 28841.20208473961, 22192.899694276286, 10976.880429144556,
                              10686.301154359677, 10776.09848748367, 27965.860247587698, 26830.224814550158,
                              26539.177334530545, 11578.699254973362, 11463.552178478127, 11113.692459439326,
                              30638.19628214322, 24049.619536529088, 21030.249006014095, 10643.70090091486,
                              10453.7553665755, 10851.28935057092, 31109.826608630654, 27849.578986509467,
                              21907.43232441284, 11084.204959504046, 10931.486053492556, 10617.154943664962,
                              34067.48088690925, 31057.81683843506, 25461.483419257427, 11120.824982910157,
                              10939.366732751803, 10501.68843539494, 52281.53172193436, 45115.128308760926,
                              40697.32062752598, 18730.394778021, 17862.24431317923, 16294.366955720267,
                              53807.60142950598,
                              48358.464538058324, 38502.130166681985, 18588.950738387197, 17310.90043217735,
                              16480.073883206154, 54772.51730504556, 49269.756608415206, 38624.595248448204,
                              18018.418531206178, 16757.436775836548, 16430.385997855254, 54794.38354919037,
                              49243.457471650145, 37733.710673328365, 18666.988427036664, 17552.919972379645,
                              16714.50974311463, 54864.038253140265, 49912.99246733524, 39111.106147546845,
                              17741.778795120015, 17454.746367665648, 15996.305483915903, 79295.85009317525,
                              65084.49754064415, 52943.89178151959, 23465.48439728474, 21832.910625647823,
                              19264.287770207746, 76548.45099026011, 60466.45166114487, 55279.197434974216,
                              24155.813207346844, 22966.410348838213, 18983.75249797779, 73649.63988890029,
                              71112.22602702447, 57946.65292077182, 23641.269675101943, 22291.717167052662,
                              18741.849658805524, 81400.06764100857, 67629.03783864013, 67405.53195610014,
                              24218.123407341278, 23333.215281521032, 20066.519859679578, 69297.20725459281,
                              63219.49226518766, 53748.09893388699, 21812.00360812832, 19872.413381814225,
                              17788.761084583686],
            'mdmkp_ct2.txt': [85737.01455327868, 78696.9991775994, 68344.04567453945, 28849.533294001798,
                              26863.98196580951, 27320.612143547143, 77201.6817216863, 75444.46744561363,
                              61063.789881092605, 29217.298765083375, 27075.31000291711, 26996.660180378818,
                              81822.22342824662, 71256.25402393805, 62341.194601596886, 28313.55566164002,
                              27523.52868077394, 27035.321578925952, 81853.34918315883, 80557.51259726346,
                              66790.0712529679, 28232.37737198369, 26469.88622592108, 26245.96998646702,
                              81785.92659972196,
                              71222.49036491562, 62160.1118806897, 29281.210740186492, 27484.81483365757,
                              26451.244595144035, 152744.10289701147, 131201.8397279085, 128183.09582390457,
                              48530.504947691516, 44624.04171250145, 41734.55641636365, 137680.65156421435,
                              131378.93642009562, 119993.19346841935, 47923.46930072854, 44961.232653882784,
                              42156.49791254687, 144428.7158031205, 134533.43016588953, 103006.65157231665,
                              47913.187589197136, 43826.18755568891, 42798.53780623339, 138875.9989433622,
                              119974.20395118099, 108237.50680627486, 48076.91709819546, 43690.33318025998,
                              41272.888199935616, 136680.00739689753, 128922.92966800612, 114619.70175377218,
                              49199.94515582458, 45910.55304695518, 43797.21240710909, 220622.55996837773,
                              194379.6945304465, 162305.7537748959, 60762.10209518433, 54341.222517811606,
                              48668.07407973811, 199563.43979134466, 165580.50491656526, 175037.9382193091,
                              61530.28209895772, 56104.68838548819, 47996.20454740994, 224140.1857862799,
                              186790.55426756508, 150832.88991816493, 62759.54862209718, 57610.3818509872,
                              50924.4636364738, 189913.657037726, 171291.44385422583, 150388.56765837915,
                              61219.44818444248, 56034.59960390541, 47761.792950168354, 198167.53454359408,
                              186238.7291392124, 154679.97893410415, 59218.96126115047, 54808.378420106,
                              47917.408017869006],
            'mdmkp_ct3.txt': [168814.0860184554, 143266.38476611354, 137156.91757617562, 57894.150493004636,
                              54801.499428939074, 53517.711310484585, 172610.2292039204, 160115.6472575543,
                              145496.39844883644, 59390.29179783931, 54289.72547227832, 53024.46694919935,
                              167567.35510673033, 164729.93693986148, 135420.79514986262, 60115.06815508855,
                              55813.36492966956, 56352.20430613357, 172688.82134408774, 162319.81137900034,
                              130344.96923837559, 59563.69109849362, 55603.0488768423, 56809.66042438546,
                              170206.74300980923, 157900.84535984247, 131060.13019116307, 59531.600760548616,
                              55559.28618907818, 54752.018503499545, 302114.49873024924, 256581.55631994538,
                              207732.980425423, 97439.41910679372, 90516.99034978052, 85260.28922281954,
                              312465.62841811427, 271474.10840658314, 225440.37664729697, 98799.08250295873,
                              90273.14037722594, 87477.24047531083, 297238.32753707597, 303609.97451424616,
                              225541.924960721, 98443.46583899345, 91397.1203183814, 86432.96390184318,
                              306816.02212839137,
                              280040.73064957885, 221762.73815399208, 98664.8071685896, 91138.37204475686,
                              87776.28663778222, 318569.3817006032, 291852.5925075597, 236866.72831430216,
                              98327.48388000038, 90336.45570858807, 86101.47544617752, 415194.2465573161,
                              362491.8427350558, 307377.7603135135, 123584.46297508608, 111764.25699100617,
                              98085.19170604613, 433314.1493530444, 364569.17167671275, 297531.23157215375,
                              125913.7470940513, 114772.6222478601, 98973.94195326211, 406167.4870924763,
                              416022.1099206263, 347267.15219282993, 125246.56624027551, 113042.34566405955,
                              98644.59205787636, 431000.6087227007, 347398.03921355103, 316049.181248464,
                              124957.64024309818, 115292.0983954651, 98821.88400173541, 390733.65163432877,
                              386296.45713615883, 312349.0075675711, 125461.39250902845, 113530.28945365804,
                              99827.79213964228],
            'mdmkp_ct4.txt': [29164.038872705965, 22448.128690234324, 22750.94208136601, 11324.083285011215,
                              10719.956309350773, 9430.485533330844, 27413.704538415757, 21461.687993511725,
                              20807.526347746276, 11174.57205823707, 10523.515868282093, 9480.294964657856,
                              27679.789721276044, 20314.35486741767, 20078.725511933364, 11321.877876900408,
                              10569.208944470603, 10037.671236768076, 27275.964278206353, 21403.189994100558,
                              18214.689756802898, 11764.756991232283, 11403.330730547532, 10754.684755455568,
                              27408.560904311627, 20239.00788536538, 19675.454531748826, 11103.196531870448,
                              10870.885634988072, 9778.676576921001, 47914.26841337081, 36755.00142928597,
                              34496.23241640505, 19355.6131185271, 17043.422551538544, 14963.241879022014,
                              48424.800879436036, 37796.04860563597, 34252.66746620095, 20004.46730023067,
                              18835.536671157857, 16372.729959011156, 46056.593752138586, 34203.22184902439,
                              32098.336710050586, 20150.91866979717, 18742.934262975916, 16261.904248836905,
                              46606.25108291802, 38692.27805531054, 34116.31787218311, 19892.13679537105,
                              17906.171672142802, 15457.930528107207, 50837.276577590026, 38270.19850132687,
                              33994.983617245525, 19964.04689543776, 18102.368498531567, 15557.02649862105,
                              66492.56132398843, 48695.57734529988, 41728.99175538258, 26020.71441769906,
                              21704.154628167817, 17058.040076600046, 66446.61120480338, 47164.040871164994,
                              48144.90458804947, 26104.088009067298, 23025.98793294367, 17964.932081561263,
                              69551.03401323149, 59291.08777980967, 47802.32806977924, 26495.990533074244,
                              22596.77082251083, 17536.90097464368, 62631.5014743124, 58643.30592840052,
                              49398.5074628221,
                              25760.06015043017, 22890.929818858796, 17713.170731163762, 70181.38883730803,
                              48918.371779400695, 49643.56705073802, 26572.11174570738, 23037.056763652552,
                              16705.942545272545],
            'mdmkp_ct5.txt': [67074.72332396788, 56922.72071257537, 52889.19458254509, 29909.01523234807,
                              27546.15586023913, 27256.80532272495, 77868.54700099613, 60229.72049072842,
                              54149.53266748691, 30249.223526187412, 27120.038198121416, 26594.844588672448,
                              70119.79201060643, 55514.79683891681, 47439.357264372185, 30134.92269436036,
                              26259.336998000002, 27193.319825225342, 67901.56262102553, 53001.06387129924,
                              55281.744348889064, 30069.120783816663, 27702.98526921436, 27356.78776039429,
                              69629.5298376119, 58835.15928545275, 50230.15054431706, 30166.73357407277,
                              27364.166305029587, 27330.144292096822, 119164.81505401935, 100397.28774329153,
                              93469.74355268248, 51930.86507009473, 46769.19322469853, 43469.001177917045,
                              131222.81251695874, 108833.88808461775, 90059.43430489714, 50740.658976924875,
                              46235.81493273908, 43496.78460049598, 128866.81838327541, 108711.7891535098,
                              86752.92311339389, 50998.811367235605, 45928.679572754314, 42680.52542881308,
                              127143.08694841203, 102644.96769290596, 85141.97072163413, 51670.6446424105,
                              46178.15119491831, 43412.42326287415, 130750.38067186893, 108385.55051038244,
                              88052.26497421459, 51783.509375019516, 45886.267591475684, 42860.85744149264,
                              169045.83770196422, 128460.7780770426, 118442.91466652084, 65910.00741807284,
                              56072.77414670372, 45324.6047968282, 169920.60488581128, 130133.63844405038,
                              121416.77168002189, 65784.1330038083, 56518.658717892344, 46831.28106896001,
                              174541.92749152833, 129928.59851393547, 108508.93425522567, 66702.65101118234,
                              56108.915404156476, 46214.73426365582, 163110.9330947666, 134212.68379176338,
                              125886.72283652119, 68024.49481755303, 57037.86726713851, 46268.360529372236,
                              173960.27635069186, 136162.4432373785, 112316.86040339211, 66543.19030194926,
                              56539.515264863825, 46146.95781182992],
            'mdmkp_ct6.txt': [144980.23407910476, 112763.51393780176, 102383.66646450528, 59980.573187587404,
                              52939.47573714053, 53771.685494620295, 154257.03187626274, 124883.9953049457,
                              120642.0249017839, 60019.79547885496, 53897.85764198486, 54161.532879947954,
                              144534.53457044237, 117720.3220895322, 96475.2443776782, 58954.60041811628,
                              54069.08130394793, 54323.06299600842, 157814.49413999054, 122314.66949077391,
                              100134.14416493346, 59884.60813014079, 53973.0450434286, 54587.50902401689,
                              151422.05437238456, 122973.61948453542, 112057.21433922206, 58594.09015818635,
                              53920.68270934412, 54374.5373291473, 282848.98344492953, 224326.69691858994,
                              183304.07819034575, 101427.42770624388, 90233.59162281707, 87931.83988695969,
                              269408.01082357974, 225474.35073228314, 215456.65002890778, 102416.03111190387,
                              90069.81910015695, 85116.5260466803, 254947.89675161077, 218974.4686576769,
                              186749.28559522133, 102917.6477109319, 91441.73103545069, 88999.20238685762,
                              269816.67061679246, 210858.44227739258, 203583.16500971685, 104182.59994978322,
                              88357.42788500736, 85767.49572881762, 272744.18752231536, 193951.70467221903,
                              188257.8254527853, 101785.26150797169, 89213.54586549665, 85484.81249285143,
                              381542.4217357743, 326469.342237431, 282353.7716418138, 128661.62461491564,
                              108999.45692138896, 95010.49588600297, 356708.95381429413, 304916.8454043936,
                              251063.8372197164, 130181.26485675877, 107033.53612376121, 94649.81679638875,
                              361613.35129891743, 306735.42153189424, 297995.04983937036, 129864.48025022763,
                              108951.57993028058, 93125.75190483894, 372946.5256811151, 312169.39120588027,
                              291961.601990496, 128139.33325293686, 107763.57401113368, 92037.90261510992,
                              371106.7889048268, 276728.6811577454, 264946.69248258974, 130334.98487932215,
                              107565.0032849825, 94861.48458289343],
            'mdmkp_ct7.txt': [21536.667021014287, 15306.883012189614, 13443.216809193567, 11390.815478460714,
                              8894.856170390527, 8519.060387333655, 21705.543635545953, 15173.62619468222,
                              13038.599272654503, 12408.558146390122, 9797.67354382143, 8876.007748591903,
                              23578.57658086318, 17182.951675388776, 13230.830577072633, 12537.577858898758,
                              9219.568400973225, 7977.518849705143, 22053.315182257193, 14764.620511312056,
                              13892.13285878336, 12425.658398919977, 9739.394008046469, 8885.452593071088,
                              22313.07495965335, 15609.53760642277, 13245.694637863515, 12055.917630568516,
                              9627.467383903446, 8162.209064269218, 42173.69463633543, 29877.880449919074,
                              25440.078288591638, 21825.455611063735, 16549.449355399665, 13971.022911392056,
                              43664.20300776704, 29464.902018501187, 24112.721453411297, 22513.26234961254,
                              16629.759894115432, 13458.744980317182, 41039.61174386542, 29361.952810329356,
                              25395.63206161855, 22057.01699394085, 16648.10129596265, 14013.12188134602,
                              43085.507865128704, 30345.55473923687, 25186.272538620593, 21913.134339634285,
                              16410.724181692833, 13953.82361078376, 44823.613253516436, 30543.80340170374,
                              26300.182116669628, 22188.202993274637, 16580.805936525514, 12952.062092272812,
                              56519.740845824, 42915.67901994479, 36709.844924364166, 29814.67594985235,
                              21301.929554223458, 15512.614795423231, 59358.39167893502, 40874.51794050845,
                              34902.226748636676, 28713.930949486898, 21518.41831664319, 15945.794740345258,
                              64920.55408589671, 37197.96324958661, 35058.404365245566, 30202.452304810613,
                              20831.238717184224, 15176.318443957553, 60911.53631172457, 42914.45741637827,
                              37188.39746443595, 29560.00507125548, 21757.49688641164, 15066.861187060727,
                              59162.50291552842, 37851.22602477869, 33511.28841330884, 29822.916196666672,
                              20755.309519582046, 14846.520309418032],
            'mdmkp_ct8.txt': [65991.67034165592, 39986.57332809463, 36598.09000404739, 31686.372556660783,
                              25445.141538461943, 25077.05114636876, 63979.22183114905, 43126.26992981033,
                              38628.88407519385, 30302.17299689071, 25856.008803794008, 26177.344337965726,
                              65138.034210076374, 44907.343983147846, 41550.321250392364, 31845.384596822078,
                              25791.469096917182, 26506.638584217988, 64634.00404312337, 40174.8200604331,
                              37334.96401267335, 30606.32307685129, 25945.06525360605, 26187.72721124403,
                              65280.72384563691, 39834.38753008512, 36962.42645358037, 30687.36207486381,
                              25679.89696314449, 25369.83962024141, 113030.16628540732, 82740.77198899978,
                              73895.62791600019, 55638.48680489044, 44334.35576064882, 40312.02329612095,
                              116780.09817051327, 76575.7430130301, 67790.62525433657, 54232.24837998093,
                              44014.019831706864, 42095.043637196846, 113131.19405348024, 82687.33750069182,
                              73711.02052653379, 53630.823367916724, 44179.40462430917, 40583.47254003538,
                              117795.90163898062, 79370.86436229874, 70043.37406542819, 56012.97811055305,
                              43195.84496979824, 41088.50539662127, 117372.85927796275, 81505.10700293747,
                              75489.689213593,
                              52990.92694419264, 43272.74841650926, 39717.78170853508, 160852.0754812623,
                              106590.67841439568, 99150.39399824802, 68409.80507279171, 52921.09290099409,
                              43061.27479238256, 169355.20414890588, 112529.5560624529, 95892.00602546158,
                              70889.48098034738, 53229.92344418698, 44841.2020442713, 162207.84790491065,
                              108897.66487579771, 86526.99526234265, 71872.14878415015, 53655.04733850709,
                              41896.08057194517, 162405.8574386429, 112025.48285525134, 100112.58173915549,
                              73823.0844300016, 53451.75195169678, 44515.54400782727, 157038.53409987607,
                              110402.29049724352, 95649.38172715022, 71516.83170706524, 53422.2982374228,
                              43167.068559292675],
            'mdmkp_ct9.txt': [134758.3549892344, 86909.00762356113, 86982.49992050465, 62340.79946652035,
                              52415.14256530901, 53232.920819668056, 128419.67845418965, 88901.5566742058,
                              83992.02809346681, 63360.38586246625, 51893.2045344762, 52256.21901538081,
                              127064.63498233976, 89453.5086261967, 79351.25774203127, 62032.14391662491,
                              51631.24745514526, 52782.4609329052, 128368.08791816013, 90245.11312968897,
                              84131.37307719128, 63133.2050746076, 52123.626492230534, 53162.85131488812,
                              129825.81285949677, 90096.64235781695, 85277.83477898309, 63245.06600443,
                              52549.65434095841,
                              53367.474150258815, 239342.2155683403, 161158.5613710625, 147529.19830464877,
                              111487.10174717069, 88339.35475314604, 85961.16276741328, 248369.26195392013,
                              162009.4593849904, 153842.18958281272, 110110.75575503791, 86496.15756377159,
                              85119.35754565377, 250539.4853694354, 167117.75419544292, 159374.2650101431,
                              109304.25500648574, 86773.9066627287, 84813.75401106518, 245446.27414940202,
                              169228.10912750015, 155884.4962464008, 108544.66757407523, 85582.42521344902,
                              84874.08841589266, 245923.51801080085, 163298.31207544284, 143918.62121275134,
                              108315.8596996154, 87105.7025967709, 84940.87088406476, 328053.7136147506,
                              225215.22929174392, 186813.67930702146, 143202.56393579207, 104756.76964530846,
                              89882.77399645871, 328408.6333206934, 234918.00365513685, 196065.373602686,
                              141788.8644964311, 105420.40686888609, 88356.57745002235, 324087.92881999584,
                              234211.97225764123, 209812.7317955713, 143874.73260227023, 106052.15296672149,
                              88147.09916517115, 341135.49211315066, 243868.20006443554, 217462.7234056969,
                              143414.35002359937, 105223.51930478415, 88613.1445228776, 336605.35161074856,
                              210327.86701928257, 195984.09990534862, 141107.11065593347, 104153.81949061107,
                              88866.18621642572]
        }

        normed = {}
        for case, (scores, error_message) in results.items():
            if case not in optimal_scores:
                continue  # Skip if there's no optimal score defined.
            optimal_list = optimal_scores[case]
            normed_scores = []
            # Compute normalized score for each index.
            for idx, score in enumerate(scores):
                if isinstance(score, (int, float)):
                    normed_scores.append(score / optimal_list[idx])
                else:
                    normed_scores.append(score)
            normed[case] = (normed_scores, error_message)

        return normed

    def get_dev(self):
        dev = {
            'mdmkp_ct1.txt': [43, 4, 30, 72, 52, 62, 33, 73, 64, 37, 17, 36, 59, 38, 13, 9, 22, 57, 15, 44, 87, 55, 2,
                              29,
                              39, 50, 11, 54, 79, 19, 10, 0, 47, 5, 18, 83, 45, 88, 81, 35, 75, 27, 70, 61, 67],
            'mdmkp_ct2.txt': [76, 25, 72, 79, 59, 55, 58, 67, 70, 5, 81, 54, 77, 51, 78, 39, 4, 84, 0, 47, 48, 24, 27,
                              69,
                              49, 34, 53, 26, 89, 73, 21, 37, 29, 10, 52, 15, 23, 46, 88, 60, 19, 64, 12, 20, 71],
            'mdmkp_ct3.txt': [4, 7, 0, 60, 57, 48, 37, 13, 45, 65, 74, 20, 80, 17, 43, 46, 67, 33, 83, 77, 32, 86, 41,
                              26,
                              70, 34, 75, 21, 47, 56, 84, 14, 25, 5, 88, 24, 9, 28, 2, 66, 85, 81, 69, 58, 18],
            'mdmkp_ct4.txt': [73, 38, 62, 32, 34, 71, 17, 19, 63, 20, 30, 55, 65, 45, 4, 22, 86, 48, 75, 23, 41, 59, 79,
                              3,
                              14, 83, 36, 72, 87, 9, 40, 44, 53, 15, 47, 74, 68, 67, 24, 28, 57, 27, 77, 89, 37],
            'mdmkp_ct5.txt': [35, 7, 69, 39, 84, 9, 44, 62, 53, 32, 72, 71, 13, 83, 12, 33, 66, 17, 59, 51, 14, 56, 0,
                              16,
                              54, 52, 65, 41, 75, 46, 89, 64, 48, 61, 28, 77, 68, 19, 36, 50, 88, 82, 80, 22, 27],
            'mdmkp_ct6.txt': [2, 69, 38, 19, 79, 66, 73, 7, 82, 33, 49, 64, 85, 89, 14, 9, 23, 40, 25, 10, 17, 31, 58,
                              78,
                              11, 74, 1, 46, 60, 28, 71, 88, 39, 62, 77, 72, 50, 22, 16, 84, 51, 53, 56, 20, 13],
            'mdmkp_ct7.txt': [68, 37, 23, 21, 71, 36, 80, 18, 0, 58, 78, 25, 26, 73, 19, 81, 7, 38, 67, 6, 77, 52, 11,
                              57,
                              86, 42, 50, 56, 82, 89, 48, 61, 53, 24, 74, 70, 43, 30, 47, 14, 69, 63, 3, 22, 44],
            'mdmkp_ct8.txt': [47, 54, 56, 87, 69, 81, 63, 6, 26, 53, 3, 83, 52, 23, 82, 57, 1, 78, 5, 13, 42, 80, 30,
                              19,
                              11, 37, 36, 61, 46, 21, 71, 35, 84, 49, 67, 70, 55, 44, 51, 12, 86, 74, 72, 45, 8],
            'mdmkp_ct9.txt': [23, 72, 78, 70, 68, 61, 52, 12, 56, 69, 35, 21, 31, 3, 25, 30, 66, 1, 54, 83, 89, 26, 49,
                              65,
                              40, 20, 57, 7, 5, 74, 44, 42, 85, 77, 87, 76, 45, 2, 86, 10, 48, 29, 46, 51, 13]}

        return dev




